{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type {\n  NDEFMessagesTransformable,\n  NDEFWriteOptions,\n  NFCPlugin,\n  NFCPluginBasic,\n  StartScanOptions,\n  PayloadType,\n  TagResultListenerFunc,\n  NFCError,\n  NDEFMessages,\n} from './definitions.js';\n\nconst NFCPlug = registerPlugin<NFCPluginBasic>('NFC', {\n  // Explicit .js extension required under node16/nodenext module resolution for emitted ES modules.\n  web: () => import('./web.js').then((m) => new m.NFCWeb()),\n});\nexport * from './definitions.js';\nexport const NFC: NFCPlugin = {\n  isSupported: NFCPlug.isSupported.bind(NFCPlug),\n  startScan: (options?: StartScanOptions) => {\n    const normalizedOptions: Record<string, unknown> = {};\n    if (options) {\n      for (const [key, value] of Object.entries(options)) {\n        if (value !== undefined && value !== null) {\n          normalizedOptions[key] = value;\n        }\n      }\n    }\n    return NFCPlug.startScan(normalizedOptions);\n  },\n  cancelScan:\n    NFCPlug.cancelScan?.bind(NFCPlug) ??\n    (async () => {\n      /* Android no-op */\n    }),\n  cancelWriteAndroid: NFCPlug.cancelWriteAndroid.bind(NFCPlug),\n  onRead: (func: TagResultListenerFunc) => {\n    NFC.wrapperListeners.push(func);\n    // Return unsubscribe function\n    return () => {\n      NFC.wrapperListeners = NFC.wrapperListeners.filter((l: TagResultListenerFunc) => l !== func);\n    };\n  },\n  onWrite: (func: () => void) => {\n    let handle: any;\n    NFCPlug.addListener(`nfcWriteSuccess`, func).then((h: any) => (handle = h));\n    return () => {\n      try {\n        handle?.remove?.();\n      } catch {\n        /* empty */\n      }\n    };\n  },\n  onError: (errorFn: (error: NFCError) => void) => {\n    let handle: any;\n    NFCPlug.addListener(`nfcError`, errorFn).then((h: any) => (handle = h));\n    return () => {\n      try {\n        handle?.remove?.();\n      } catch {\n        /* empty */\n      }\n    };\n  },\n  removeAllListeners: (eventName: 'nfcTag' | 'nfcError') => {\n    NFC.wrapperListeners = [];\n    return NFCPlug.removeAllListeners(eventName);\n  },\n  wrapperListeners: [],\n\n  async writeNDEF<T extends PayloadType = Uint8Array>(options?: NDEFWriteOptions<T>): Promise<void> {\n    // Helper encoders for well-known record types (only applied to string payloads)\n    const buildTextPayload = (text: string, lang = 'en'): number[] => {\n      const langBytes = Array.from(new TextEncoder().encode(lang));\n      const textBytes = Array.from(new TextEncoder().encode(text));\n      const status = langBytes.length & 0x3f; // UTF-8 encoding, language length (<= 63)\n      return [status, ...langBytes, ...textBytes];\n    };\n    const buildUriPayload = (uri: string, prefixCode = 0x00): number[] => {\n      const uriBytes = Array.from(new TextEncoder().encode(uri));\n      return [prefixCode, ...uriBytes];\n    };\n\n    const recordsArray = options?.records ?? [];\n    if (recordsArray.length === 0) throw new Error('At least one NDEF record is required');\n\n    const isRawMode = options?.rawMode === true;\n\n    const ndefMessage: NDEFWriteOptions<number[]> = {\n      records: recordsArray.map((record: any) => {\n        let payload: number[] | null = null;\n\n        if (typeof record.payload === 'string') {\n          if (isRawMode) {\n            // Raw mode: write string payloads as UTF-8 bytes without any framing\n            payload = Array.from(new TextEncoder().encode(record.payload));\n          } else {\n            // Apply spec-compliant formatting only for Well Known Text (T) & URI (U) types.\n            if (record.type === 'T') {\n              payload = buildTextPayload(record.payload);\n            } else if (record.type === 'U') {\n              payload = buildUriPayload(record.payload);\n            } else {\n              // Generic string: raw UTF-8 bytes (no extra framing)\n              payload = Array.from(new TextEncoder().encode(record.payload));\n            }\n          }\n        } else if (Array.isArray(record.payload)) {\n          // Assume already raw bytes; do NOT modify\n          payload = record.payload as number[];\n        } else if (record.payload instanceof Uint8Array) {\n          payload = Array.from(record.payload);\n        }\n\n        if (!payload) throw new Error('Unsupported payload type');\n\n        return { type: record.type, payload };\n      }),\n    };\n\n    await NFCPlug.writeNDEF(ndefMessage);\n  },\n};\n\n// ----- Payload transformation helpers -----\ntype DecodeSpecifier = 'b64' | 'string' | 'uint8Array' | 'numberArray';\ntype decodedType<T extends DecodeSpecifier> = NDEFMessages<\n  T extends 'b64' ? string : T extends 'string' ? string : T extends 'uint8Array' ? Uint8Array : number[]\n>;\n\n// Decode a base64 string into a Uint8Array (browser-safe). Existing code used atob already.\nconst decodeBase64ToBytes = (base64Payload: string): Uint8Array => {\n  const bin = atob(base64Payload);\n  const out = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; i++) out[i] = bin.charCodeAt(i);\n  return out;\n};\n\n// Parse NFC Forum \"Text\" (Well Known 'T') records according to spec.\nconst decodeTextRecord = (bytes: Uint8Array): string => {\n  if (bytes.length === 0) return '';\n  const status = bytes[0];\n  const isUTF16 = (status & 0x80) !== 0; // Bit 7 indicates encoding\n  const langLength = status & 0x3f; // Bits 0-5 language code length\n  if (1 + langLength > bytes.length) return ''; // Corrupt\n  const textBytes = bytes.slice(1 + langLength);\n  try {\n    const decoder = new TextDecoder(isUTF16 ? 'utf-16' : 'utf-8');\n    return decoder.decode(textBytes);\n  } catch {\n    // Fallback: naive ASCII\n    return Array.from(textBytes)\n      .map((b) => String.fromCharCode(b))\n      .join('');\n  }\n};\n\n// Basic URI prefix table for Well Known 'U' records (optional convenience)\nconst URI_PREFIX: string[] = [\n  '',\n  'http://www.',\n  'https://www.',\n  'http://',\n  'https://',\n  'tel:',\n  'mailto:',\n  'ftp://anonymous:anonymous@',\n  'ftp://ftp.',\n  'ftps://',\n  'sftp://',\n  'smb://',\n  'nfs://',\n  'ftp://',\n  'dav://',\n  'news:',\n  'telnet://',\n  'imap:',\n  'rtsp://',\n  'urn:',\n  'pop:',\n  'sip:',\n  'sips:',\n  'tftp:',\n  'btspp://',\n  'btl2cap://',\n  'btgoep://',\n  'tcpobex://',\n  'irdaobex://',\n  'file://',\n  'urn:epc:id:',\n  'urn:epc:tag:',\n  'urn:epc:pat:',\n  'urn:epc:raw:',\n  'urn:epc:',\n  'urn:nfc:',\n];\n\nconst decodeUriRecord = (bytes: Uint8Array): string => {\n  if (bytes.length === 0) return '';\n  const prefixIndex = bytes[0];\n  const prefix = URI_PREFIX[prefixIndex] || '';\n  const remainder = bytes.slice(1);\n  try {\n    return prefix + new TextDecoder('utf-8').decode(remainder);\n  } catch {\n    return (\n      prefix +\n      Array.from(remainder)\n        .map((b) => String.fromCharCode(b))\n        .join('')\n    );\n  }\n};\n\nconst toStringPayload = (recordType: string, bytes: Uint8Array): string => {\n  // Well Known Text\n  if (recordType === 'T') return decodeTextRecord(bytes);\n  // Well Known URI\n  if (recordType === 'U') return decodeUriRecord(bytes);\n  // Default: attempt UTF-8 decode\n  try {\n    return new TextDecoder('utf-8').decode(bytes);\n  } catch {\n    return Array.from(bytes)\n      .map((c) => String.fromCharCode(c))\n      .join('');\n  }\n};\n\nconst mapPayloadTo = <T extends DecodeSpecifier>(type: T, data: NDEFMessages): decodedType<T> => {\n  return {\n    messages: data.messages.map((message: any) => ({\n      records: message.records.map((record: any) => {\n        const bytes = decodeBase64ToBytes(record.payload as unknown as string);\n        let payload: any;\n        switch (type) {\n          case 'b64':\n            payload = record.payload; // original base64 string\n            break;\n          case 'uint8Array':\n            payload = bytes;\n            break;\n          case 'numberArray':\n            payload = Array.from(bytes);\n            break;\n          case 'string':\n            payload = toStringPayload(record.type, bytes);\n            break;\n          default:\n            payload = record.payload;\n        }\n        return { type: record.type, payload };\n      }),\n    })),\n    tagInfo: data.tagInfo, // Include tag information\n  } as decodedType<T>;\n};\n\nNFCPlug.addListener(`nfcTag`, (data: any) => {\n  const wrappedData: NDEFMessagesTransformable = {\n    base64() {\n      return mapPayloadTo('b64', data);\n    },\n    string() {\n      return mapPayloadTo('string', data);\n    },\n    uint8Array() {\n      return mapPayloadTo('uint8Array', data);\n    },\n    numberArray() {\n      return mapPayloadTo('numberArray', data);\n    },\n  };\n\n  for (const listener of NFC.wrapperListeners) {\n    listener(wrappedData);\n  }\n});\n"]}